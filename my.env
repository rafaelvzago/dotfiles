#!/bin/bash
# Author: Rafael Zago
# Email: rafaelvzago@gmail.com
# GitHub: https://github.com/rafaelvzago
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


# History configuration
HISTSIZE=100000 # How many lines of history to keep in memory
SAVEHIST=100000 # Number of history entries to save to disk
HISTFILE=~/zsh_history  # Where to save history to disk
bindkey -v  # vi mode for history search
bindkey '^R' history-incremental-search-backward  # CTRL+R to search history
bindkey -e  # emacs mode for command line editing
setopt INC_APPEND_HISTORY # Immediately append to the history file, not just when a term is killed
setopt SHARE_HISTORY  # Share history between all sessions
CASE_SENSITIVE="true" # Case insensitive tab completion
autoload -Uz compinit && compinit # Initialize autocomplete
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'  # Case insensitive autocomplete
zstyle ':completion:*:descriptions' format '%B%d%b'  # Bold descriptions
zstyle ':completion:*:warnings' format 'No matches for: %d'  # Custom warning format
zstyle ':completion:*' group-name ''  # Don't group matches

# K8S
source <(kubectl completion zsh) # Kubectl completion

# General Utilities
alias ls='ls --color=auto'  # Colorize ls output
alias nsclean="for _NS in \$(oc get --kubeconfig \$KUBECONFIG ns | grep -E \"^(public|private)-.*-[0-9]?\" | awk -F \" \" '{print \$1}'); do printf \"On %25s removing namespace %15s \\n\" \$KUBECONFIG \$_NS; oc --kubeconfig \$KUBECONFIG delete ns \$_NS --force --grace-period=0; done" # Remove all dangling namespaces from a cluster
alias xclipo="xclip -selection clipboard" # Xclip alias
alias bck='cd -'  # Go back to the previous directory
alias srch="grep -rni"  # Search for a string in a file

# System Monitoring Aliases
alias usg="top -o %CPU" # Top CPU consuming processes
alias dsks="df -h"  # Disk usage

# Networking Aliases
alias hdrs="curl -I"  # Curl headers alias
alias lstn="lsof -i :"  # List open ports alias

# Kubernetes & OpenShift
alias mks="${HOME}/Code/k8s/local/minikube.sh"  # Minikube start
alias mk="minikube"  # Minikube alias
alias sk="skupper"  # Skupper alias
alias skp="kubectl get secrets skupper-console-users -o json | jq -r .data.admin | base64 -d" # Skupper Console password alias
alias kns="kubectl config view --minify --output 'jsonpath={..namespace}'" # Kubectl get namespace alias
alias kbn="${HOME}/Code/shell-utils/kinit.sh" # Kinit alias
alias kc="kubectl"  # Kubectl alias
alias kce="kubectl get events --sort-by='.lastTimestamp'"
alias ksns="kubectl config set-context --current --namespace" # Kubectl set namespace alias
alias ocprj="oc project" # OpenShift project alias
alias kex="kubectl exec -it \$(kubectl get pods | grep Running | head -n 1 | awk '{print \$1}') -- bash"  # Kubectl exec alias
alias kds="kubectl describe pod" # Kubectl describe pod alias
alias ocl="oc logs -f deployment/${1}"  # OpenShift logs alias

# OpenStack
alias os="openstack"  # Openstack alias
alias osc="~/Code/shell-utils/openstack-create.sh"  # Openstack create alias
alias oslbe='openstack loadbalancer list -f json | jq -r ".[] | select(.provisioning_status == \"ERROR\") | .id" | xargs -I {} sh -c "openstack loadbalancer show -f json {} | jq -r \"{ id: .id, description: .description, status: .provisioning_status }\""' # Openstack list loadbalancers in ERROR state alias
alias osfips='openstack floating ip list -f json | jq -r ".[] | .ID" | xargs -I {} sh -c "openstack floating ip show -f json {} | jq -r \"{ id: .id, description: .description }\""' # Openstack floating IPs alias

# Version Control
alias gl="git log --all --decorate --oneline --graph" # Git log alias
alias crc="~/Code/crc/crc-linux-2.14.0-amd64/crc" # CodeReady Containers alias

klog() { # Description: Function to tail logs from a deployment
  local deployment="$1"
  local pod_name=$(kubectl get pod -l app="${deployment}" -o jsonpath='{.items[0].metadata.name}')
  kubectl logs -f "${pod_name}"
}


# Functions

klog() {  # Description: Function to tail logs from a app
  local app_name=$1
  local pod_name=$(kubectl get pods -l app="${app_name}" -o jsonpath='{.items[0].metadata.name}')
  kubectl logs -f "${pod_name}"
}

function osnet() { # Description: Function to list Openstack networks with ID and Name and accepts a pattern as parameter
  local pattern=$1
  openstack network list -f json | jq -r --arg pattern "$pattern" '.[] | select(.Name | test($pattern)) | "\(.ID) \(.Name)"'
}

function ocp() {  # Description: OCP4 cluster switcher function that receives the cluster name as parameter
  _CLUSTER=${1}
  _OCP4DIR="${HOME}/Code/ocp4-clusters"
  cd "${_OCP4DIR}/${_CLUSTER}"
  git checkout master
  git pull origin master
  cd -
  cat ${_OCP4DIR}/${_CLUSTER}/auth/kubeconfig > $HOME/.kube/${_CLUSTER}-config
  KUBECONFIG="$HOME/.kube/${_CLUSTER}-config"
  export KUBECONFIG
}

function sk8s() { # Description: Function to select a kubeconfig file
  declare -a OPTIONS
  i=0
  for file in ~/.kube/*; do
    OPTIONS+=("$((++i))")
    OPTIONS+=("$file")
  done

  CHOICE=$(dialog --clear \
                  --backtitle "K8s Configuration Files" \
                  --title "Choose a K8s config" \
                  --menu "Select one of the Kubernetes configuration files:" \
                  15 40 \
                  "${#OPTIONS[@]}" \
                  "${OPTIONS[@]}" \
                  2>&1 >/dev/tty)

  clear
  if [ -z "$CHOICE" ]; then
    echo "No config selected."
  else
    export KUBECONFIG=${OPTIONS[CHOICE*2]}
    echo "KUBECONFIG is set to ${KUBECONFIG}"
  fi
}

function skf() { # Description: Function to validate kubeconfigs
  for file in ~/.kube/*; do
    if [[ -f "$file" ]]; then
      export KUBECONFIG="$file"
      if ! kubectl cluster-info >/dev/null 2>&1; then
        echo "Moving $file to inactive"
        mv "$file" ~/.kube/inactive/
      fi
    fi
  done
  unset KUBECONFIG
}

function skd() {  # Description: Function to download skupper version
  local _VERSION=$1
  local _SKUPPER_DIR="${HOME}/Skupper"
  local _SKUPPER_BIN="${_SKUPPER_DIR}/skupper-${_VERSION}"
  local _SKUPPER_URL="https://github.com/skupperproject/skupper/releases/download/${_VERSION}/skupper-cli-${_VERSION}-linux-amd64.tgz"

  # Validate if the version is valid
  if [[ -f "${_SKUPPER_BIN}" ]]; then
    echo "Version already downloaded."
    return 1
  fi

  # Download the skupper binary
  wget -O "${_SKUPPER_BIN}.tgz" "${_SKUPPER_URL}"

  # Extract the skupper binary
  tar -xvf "${_SKUPPER_BIN}.tgz" -C "${_SKUPPER_DIR}"

  # Remove the tar file
  rm "${_SKUPPER_BIN}.tgz"

  # Rename the binary
  mv "${_SKUPPER_DIR}/skupper" "${_SKUPPER_BIN}"

  # Printing the message to the user.
  echo "Skupper version ${_VERSION} downloaded."

}

function skupload() { # Description: Function to tag the images and pull into quay
  local _FILE=$1
  local _QUAY_USER=rzago

  while read _IMAGE; do
    _ENV_VAR=$(echo $_IMAGE | awk -F "=" '{print $1}')
    _IMAGE_NAME=$(echo $_IMAGE | awk -F "=" '{print $2}')
    _IMAGE_NAME_QUAY=$(echo $_IMAGE_NAME | awk -F "/" '{print $NF}')
    _SHA=$(skopeo inspect docker://$_IMAGE_NAME | jq -r .Digest) > /dev/null 2>&1
    skopeo copy --dest-tls-verify=false  docker://$_IMAGE_NAME docker://quay.io/${_QUAY_USER}/$_IMAGE_NAME_QUAY 2>&1 > /dev/null  && echo "export $_ENV_VAR=quay.io/${_QUAY_USER}/$_IMAGE_NAME_QUAY"
    # Setting new image as public on quay
    #set_public_on_quay "$_IMAGE_NAME_QUAY" "$_QUAY_USER" "UHN5E2BT4X1OCQJ2UW33G2R01KHEYVXX57HPDT4MI0M7CD2QQ38YIDV793SNBB6M"

  done < "$_FILE"

}

function set_public_on_quay() {
    local _REPO=$1
    local _QUAY_USER=$2
    local _QUAY_TOKEN=$3

    curl -X PUT -H "Content-Type: application/json" -H "Authorization: Bearer ${_QUAY_TOKEN}" \
    -d '{"visibility": "public"}' \
    "https://quay.io/api/v1/repository/${_QUAY_USER}/${_REPO}"
}

function skv() {  # Description: Function to swhich between skupper versions
  local _VERSION=$1
  local _SKUPPER_DIR="${HOME}/Skupper"
  local _SKUPPER_BIN="${_SKUPPER_DIR}/skupper-${_VERSION}"
  local _SKUPPER_BIN_LINK="${HOME}/.local/bin/skupper"

  # Validate if the version is valid
  if ! [[ -f "${_SKUPPER_BIN}" ]]; then
    echo "Invalid version."
    return 1
  fi

  # Unlink current skupper binary
  unlink "${_SKUPPER_BIN_LINK}"

  # Link new skupper binary
  ln -s "${_SKUPPER_BIN}" "${_SKUPPER_BIN_LINK}"

  # Printing the message to the user.
  echo "Skupper version ${_VERSION} is now active."

}

function psi() {  # Description: Function to set PSI credentials
  _PSI=$1
  case $_PSI in
    1) source ~/Envs/RHOS-D-amq-interconnect-qe-openrc.sh ;;
    2) source ~/Envs/RHOS-01-amq-interconnect-qe-openrc.sh ;;
    *) echo "Please choose between 1 (RHOS-D) or 2 (RHOS-01)" ;;
  esac
}


function pis() {  # Description: Function to pull images listed in a file and print the image name and SHA.
  _FILE=$1
  while read _IMAGE; do
    _ENV_VAR=$(echo $_IMAGE | awk -F "=" '{print $1}')
    _IMAGE_NAME=$(echo $_IMAGE | awk -F "=" '{print $2}')
    _SHA=$(skopeo inspect docker://$_IMAGE_NAME | jq -r .Digest) > /dev/null 2>&1
    echo "$_ENV_VAR=$_IMAGE_NAME@$_SHA"
  done < "$_FILE"
}

function show() { # Description: Function to show the content of a file
  local env_file="$HOME/my.env"

  # Find the maximum length for each column
  local max_type_length=$(awk -F'[ =#]' '/^(alias|function)/ { if(length($1) > max) { max = length($1); } } END { print max+2; }' "$env_file")
  local max_name_length=$(awk -F'[ =#]' '/^(alias|function)/ { name_len = length($2); if(name_len > max) { max = name_len; } } END { print max+2; }' "$env_file")

  # Print headers
  printf "| %-*s | %-*s | %s\n" $max_type_length "Type" $max_name_length "Name" "Description"
  printf "| %-${max_type_length}s | %-${max_name_length}s |\n" $(printf '%*s' $max_type_length | tr ' ' '-') $(printf '%*s' $max_name_length | tr ' ' '-')

  # Print each row with the correct formatting
  awk -v type_len="$max_type_length" -v name_len="$max_name_length" -F'[ =#]' '/^(alias|function)/ {
    type = $1;
    name = $2;
    sub(/^[ \t]+/, "", $0);
    desc = $0;
    sub(/.*#/, "", desc);
    printf "| %-*s | %-*s | %s\n", type_len, type, name_len, name, desc;
  }' "$env_file"
}

# Environment variables configuration

# Groovy
export GROOVY_HOME="$HOME/opt/groovy"  # Set Groovy home directory
export JAVA_HOME="/usr/lib/jvm/java"  # Set JAVA home directory

# Gradle
export GRADLE_HOME="$HOME/opt/gradle"  # Set Gradle home directory

# Go
export GOPATH="$HOME/.go"  # Set Go path
export GO_BIN_DIR="/usr/local/go/bin"  # Set Go bin directory

# Validate and export GOPATH
if [ -d "$GOPATH" ]; then
    export GOPATH
fi

# Ruby
export GEM_HOME="$(ruby -e 'puts Gem.user_dir')"

# Anaconda setup
export ANACONDA_DIR="$HOME/anaconda3"  # Set Anaconda directory
eval "$($HOME/anaconda3/bin/conda shell.zsh hook)"  # Initialize Conda environment

# Node Version Manager
export NVM_DIR="$HOME/.nvm"  # Set NVM directory
# Load NVM if available
if [ -s "$NVM_DIR/nvm.sh" ]; then
    \. "$NVM_DIR/nvm.sh"
fi
# Load NVM zsh_completion if available
if [ -s "$NVM_DIR/zsh_completion" ]; then
    \. "$NVM_DIR/zsh_completion"
fi

# Default Editor
export EDITOR="vi"  # Set vi as the default editor

# Local bin
export LOCAL_BIN=$USER/bin

# PATH setup
# Prepending custom paths to ensure they take precedence over system executables
PATH="$HOME/.rd/bin:$HOME/.local/bin:$GO_BIN_DIR:$GROOVY_HOME/bin:$JAVA_HOME/bin:$NVM_DIR:$GOPATH/bin:$ANACONDA_DIR/bin:$GRADLE_HOME/bin:$GEM_HOME/bin:$HOME/bin:$PATH"

# Deduplicate PATH
PATH=$(echo "$PATH" | awk -v RS=':' -v ORS=":" '!a[$0]++')

# Export the updated PATH
export PATH
