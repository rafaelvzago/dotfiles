# History configuration
HISTSIZE=100000                                                               # How many lines of history to keep in memory
SAVEHIST=100000                                                               # Number of history entries to save to disk
HISTFILE=~/zsh_history                                                        # Where to save history to disk
bindkey -v                                                                    # vi mode for history search
bindkey '^R' history-incremental-search-backward                              # CTRL+R to search history
bindkey -e                                                                    # emacs mode for command line editing
setopt INC_APPEND_HISTORY                                                     # Immediately append to the history file, not just when a term is killed
setopt SHARE_HISTORY                                                          # Share history between all sessions
CASE_SENSITIVE="true"                                                         # Case insensitive tab completion
autoload -Uz compinit && compinit                                             # Initialize autocomplete
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'                        # Case insensitive autocomplete

# ASDF  
. $HOME/.asdf/asdf.sh                                                         # Add asdf to PATH
fpath=(${ASDF_DIR}/completions $fpath)                                        # Add asdf completions to fpath

# Cargo
source "$HOME/.cargo/env"                                                     # Add cargo to PATH 

# Aliases
alias ls='ls --color=auto'                                                    # Colorize ls output
alias os="openstack"                                                          # Openstack alias
alias crc="~/Code/crc/crc-linux-2.14.0-amd64/crc"                              # CodeReady Containers alias
alias mk="minikube"                                                           # Minikube alias
alias gl="git log --all --decorate --oneline --graph"                         # Git log alias 
alias sk="skupper"                                                            # Skupper alias
alias osc="~/Code/shell-utils/openstack-create.sh"                             # Openstack create alias
alias skp="kubectl get secrets skupper-console-users -o json |  \
  jq -r .data.admin | base64 -d"                                              # Skupper Console password alias
alias kns="kubectl config view --minify --output 'jsonpath={..namespace}'"    # Kubectl get namespace alias
alias nsclean="for _NS in \$(oc get --kubeconfig $KUBECONFIG ns | \
  grep -E \"^(public|private)-.*-[0-9]?\" | awk -F \" \" '{print \$1}');  \
  do printf \"On %25s removing namespace %15s \\n\" \$KUBECONFIG \$_NS;   \
  oc --kubeconfig $KUBECONFIG  delete ns \${_NS} --force --grace-period=0;\ 
  done"                                                                       # Remove all dangling namespaces from a cluster
alias kbn="${HOME}/Code/shell-utils/kinit.sh"                                  # Kinit alias

# K8S
source <(kubectl completion zsh)                                              # Kubectl completion
alias kc="kubectl"                                                            # Kubectl alias
alias ksns="kubectl config set-context --current --namespace"                 # Kubectl set namespace alias
function ocp {
  _CLUSTER=${1}
  _OCP4DIR="${HOME}/Code/ocp4-clusters"
  cd "${_OCP4DIR}/${_CLUSTER}"
  git checkout master
  git pull origin master
  cd -
  cat ${_OCP4DIR}/${_CLUSTER}/auth/kubeconfig > $HOME/.kube/${_CLUSTER}-config
  KUBECONFIG="$HOME/.kube/${_CLUSTER}-config"
  export KUBECONFIG
}                                                                             # OCP4 cluster switcher function that receives the cluster name as parameter

function select_kubeconfig() {                                                # Function to select a kubeconfig file
  declare -a OPTIONS
  i=0
  for file in ~/.kube/*; do
    OPTIONS+=("$((++i))")
    OPTIONS+=("$file")
  done

  CHOICE=$(dialog --clear \
                  --backtitle "K8s Configuration Files" \
                  --title "Choose a K8s config" \
                  --menu "Select one of the Kubernetes configuration files:" \
                  15 40 \
                  "${#OPTIONS[@]}" \
                  "${OPTIONS[@]}" \
                  2>&1 >/dev/tty)

  clear
  if [ -z "$CHOICE" ]; then
    echo "No config selected."
  else
    export KUBECONFIG=${OPTIONS[CHOICE*2]}
    echo "KUBECONFIG is set to ${KUBECONFIG}"
  fi
}

function skf() {                                                              # Function to validate kubeconfigs
  for file in ~/.kube/*; do
    if [[ -f "$file" ]]; then
      export KUBECONFIG="$file"
      if ! kubectl cluster-info >/dev/null 2>&1; then
        echo "Moving $file to inactive"
        mv "$file" ~/.kube/inactive/
      fi
    fi
  done
  unset KUBECONFIG
}

# Groovy
export GROOVY_HOME=~/bin/groovy-latest                                        # Groovy home
export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk                              # Java home

# GO
GOPATH=~/.go                                                                  # Go path
GO_BIN_DIR=/usr/local/go/bin                                                  # Go bin directory
export GOPATH                                                                 # Export Go path

# RedHat PSI credentials
function psi() {                                                              # Function to set PSI credentials
  _PSI=$1
  case $_PSI in
    1) source ~/Envs/RHOS-D-amq-interconnect-qe-openrc.sh ;;
    2) source ~/Envs/RHOS-01-amq-interconnect-qe-openrc.sh ;;
    *) echo "Please choose between 1 (RHOS-D) or 2 (RHOS-01)" ;;
  esac
}                                                                             


# Images functions
function pis() {                                                              # Function to pull images listed in a file and print the image name and SHA.
  _FILE=$1
  # Image name and tag are after the =
  while read _IMAGE; do
    _ENV_VAR=$(echo $_IMAGE | awk -F "=" '{print $1}')
    _IMAGE_NAME=$(echo $_IMAGE | awk -F "=" '{print $2}')
    _SHA=$(skopeo inspect docker://$_IMAGE_NAME | jq -r .Digest) > /dev/null 2>&1
    echo "$_IMAGE_NAME@$_SHA"
  done < $_FILE
}

function ski() {                                                              # Function validate the image downloaded and export to an environment variable
  # Variables Names 
  _FILE=$1
  while read _IMAGE; do
    printf "Exporting $_IMAGE to environment variable\n" 
    export $_IMAGE
  done < $_FILE 
}

function skd() {                                                              # Function to download skupper version 
  _BIN_PATHS=$HOME/Skupper/
  _VERSION=$1
  # Download the specified version from github
  curl -L https://github.com/skupperproject/skupper/releases/download/${_VERSION}/skupper-cli-${_VERSION}-linux-amd64.tgz -o /tmp/skupper-cli-${_VERSION}-linux-amd64.tgz > /dev/null 2>&1
  # Extract the tarball
  tar -xvf /tmp/skupper-cli-${_VERSION}-linux-amd64.tgz -C /tmp/
  mv /tmp/skupper ${_BIN_PATHS}/skupper-${_VERSION}
  ln -sf ${_BIN_PATHS}/skupper-${_VERSION} /home/rzago/.local/bin/skupper
  export PATH=$HOME"/.local/bin:$PATH"
}

function skv() {                                                              # Function to switch skupper version
  declare -a OPTIONS
  for file in ~/Skupper/*; do
    if [[ -f "$file" && -x "$file" ]]; then
      version=$(basename "$file")
      OPTIONS+=("$version")
      OPTIONS+=("")
    fi
  done

  CHOICE=$(dialog --clear \
                  --backtitle "Skupper CLI Versions" \
                  --title "Choose a Skupper version" \
                  --menu "Select one of the Skupper CLI versions:" \
                  15 40 \
                  "${#OPTIONS[@]}" \
                  "${OPTIONS[@]}" \
                  2>&1 >/dev/tty)

  clear
  if [ -z "$CHOICE" ]; then
    echo "No version selected."
  else
    ln -sf ~/Skupper/"$CHOICE" ~/.local/bin/skupper
    export PATH=$HOME"/.local/bin:$PATH"
    echo "Skupper CLI version is set to $CHOICE"
  fi
}

show() {                                                                      # Function to show aliases and functions from a file
    local env_file="$HOME/my.env"

    # Check if the file exists
    if [ ! -f "$env_file" ]; then
        echo "Error: $env_file not found."
        return 1
    fi

    # Use grep and awk to find aliases and functions, then format the output into a table
    grep -E '^(alias|function)\s+(\w+)[^#]*#(.*)$' "$env_file" | awk -F '# ' '{ printf "%-30s | %-60s\n", $1, $2; }'
}

# Default Editor
export EDITOR=vi                                                              # Default editor

# PATH
PATH=$PATH:$HOME/.rd/bin:$HOME/.local/bin:$GO_BIN_DIR:$GROOVY_HOME/bin:$JAVA_HOME/bin 
